 배열 (Array)
    데이터를 나열하고, 각 데이터를 인덱스에 대응하도록 구성한 데이터 구조
    파이썬에서는 리스트 타입이 배열 기능을 제공함

    1. 배열은 왜 필요할까?
    같은 종류의 데이터를 효율적으로 관리하기 위해 사용
    같은 종류의 데이터를 순차적으로 저장
    
    장점:
        빠른 접근 가능
        첫 데이터의 위치에서 상대적인 위치로 데이터 접근(인덱스 번호로 접근)
    단점:
        데이터 추가/삭제의 어려움
        미리 최대 길이를 지정해야 함



큐 (Queue)
    1. 큐 구조
    줄을 서는 행위와 유사 
    가장 먼저 넣은 데이터를 가장 먼저 꺼낼 수 있는 구조

    음식점에서 가장 먼저 줄을 선 사람이 제일 먼저 음식점에 입장하는 것과 동일
    FIFO(First-In, First-Out) 또는 LILO(Last-In, Last-Out) 방식으로 스택과 꺼내는 순서가 반대

    2. 알아둘 용어
        Enqueue: 큐에 데이터를 넣는 기능
        Dequeue: 큐에서 데이터를 꺼내는 기능

https://visualgo.net/en/list




스택 (Stack)
    데이터를 제한적으로 접근할 수 있는 구조
    한쪽 끝에서만 자료를 넣거나 뺄 수 있는 구조
    가장 나중에 쌓은 데이터를 가장 먼저 빼낼 수 있는 데이터 구조
    
    큐: FIFO 정책
    스택: LIFO 정책

    1. 스택 구조
        스택은 LIFO(Last In, Fisrt Out) 또는 FILO(First In, Last Out) 데이터 관리 방식을 따름

        LIFO: 마지막에 넣은 데이터를 가장 먼저 추출하는 데이터 관리 정책
        FILO: 처음에 넣은 데이터를 가장 마지막에 추출하는 데이터 관리 정책
        대표적인 스택의 활용

        컴퓨터 내부의 프로세스 구조의 함수 동작 방식
        
        주요 기능
            push(): 데이터를 스택에 넣기
            pop(): 데이터를 스택에서 꺼내기

    2. 스택 구조와 프로세스 스택
        스택 구조는 프로세스 실행 구조의 가장 기본

    3. 자료 구조 스택의 장단점
        장점
            구조가 단순해서, 구현이 쉽다.
            데이터 저장/읽기 속도가 빠르다.

        단점 (일반적인 스택 구현시)
            데이터 최대 갯수를 미리 정해야 한다.
            저장 공간의 낭비가 발생할 수 있음
            미리 최대 갯수만큼 저장 공간을 확보해야 함
            스택은 단순하고 빠른 성능을 위해 사용되므로, 보통 배열 구조를 활용해서 구현하는 것이 일반적임. 이 경우, 위에서 열거한 단점이 있을 수 있음
    

링크드 리스트 (Linked List)

    1. 링크드 리스트 (Linked List) 구조
        연결 리스트라고도 함
        배열은 순차적으로 연결된 공간에 데이터를 나열하는 데이터 구조 but 링크드 리스트는 떨어진 곳에 존재하는 데이터를 화살표로 연결해서 관리하는 데이터 구조
        
    링크드 리스트 기본 구조와 용어
        노드(Node): 데이터 저장 단위 (데이터값, 포인터) 로 구성
        포인터(pointer): 각 노드 안에서, 다음이나 이전의 노드와의 연결 정보를 가지고 있는 공간
    

Big O (빅-오) 표기법: O(N)

    알고리즘 최악의 실행 시간을 표기
    가장 많이/일반적으로 사용함
    아무리 최악의 상황이라도, 이정도의 성능은 보장한다는 의미이기 때문

    입력 n 에 따라 결정되는 시간 복잡도 함수
    단순하게 입력 n에 따라, 몇번 실행이 되는지를 계산
    표현식에 가장 큰 영향을 미치는 n 의 단위로 표기
    
    빅오 입력값 표기 방법
    예:
    만약 시간 복잡도 함수가 2n(제곱) + 3n 이라면
    가장 높은 차수는 2n(제곱)
    상수는 실제 큰 영향이 없음

해쉬 테이블 (Hash Table)
    1. 해쉬 구조
        Hash Table: 키(Key)에 데이터(Value)를 저장하는 데이터 구조
        Key를 통해 바로 데이터를 받아올 수 있으므로, 속도가 획기적으로 빨라짐
        파이썬 딕셔너리(Dictionary) 타입이 해쉬 테이블의 예: Key를 가지고 바로 데이터(Value)를 꺼냄
        보통 배열로 미리 Hash Table 사이즈만큼 생성 후에 사용 (공간과 탐색 시간을 맞바꾸는 기법)
    
    2. 알아둘 용어
        해쉬(Hash): 임의 값을 고정 길이로 변환하는 것
        해쉬 테이블(Hash Table): 키 값의 연산에 의해 직접 접근이 가능한 데이터 구조
        해싱 함수(Hashing Function): Key에 대해 산술 연산을 이용해 데이터 위치를 찾을 수 있는 함수
        해쉬 값(Hash Value) 또는 해쉬 주소(Hash Address): Key를 해싱 함수로 연산해서, 해쉬 값을 알아내고, 이를 기반으로 해쉬 테이블에서 해당 Key에 대한 데이터 위치를 일관성있게 찾을 수 있음
        슬롯(Slot): 한 개의 데이터를 저장할 수 있는 공간

    3. 해쉬 테이블의 장단점과 주요 용도
        장점
            데이터 저장/읽기 속도가 빠르다. (검색 속도가 빠르다.)
            해쉬는 키에 대한 데이터가 있는지(중복) 확인이 쉬움
        단점
            일반적으로 저장공간이 좀더 많이 필요하다.
            여러 키에 해당하는 주소가 동일할 경우 충돌을 해결하기 위한 별도 자료구조가 필요함
            주요 용도
            검색이 많이 필요한 경우
            저장, 삭제, 읽기가 빈번한 경우
            캐쉬 구현시 (중복 확인이 쉽기 때문)

        Linear Probing 기법
            폐쇄 해슁 또는 Close Hashing 기법 중 하나: 해쉬 테이블 저장공간 안에서 충돌 문제를 해결하는 기법
            충돌이 일어나면, 해당 hash address의 다음 address부터 맨 처음 나오는 빈공간에 저장하는 기법
            저장공간 활용도를 높이기 위한 기법

        Chaining 기법
            개방 해슁 또는 Open Hashing 기법 중 하나: 해쉬 테이블 저장공간 외의 공간을 활용하는 기법
            충돌이 일어나면, 링크드 리스트라는 자료 구조를 사용해서, 링크드 리스트로 데이터를 추가로 뒤에 연결시켜서 저장하는 기법